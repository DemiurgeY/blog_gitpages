[{"url":"/2018/03/31/JavaScript闭包/","content":"#JavaScript的闭包(Closure)\n\n----------\n\n>本文权当是笔记,后期飞升之后,再回来补自己的理解与体会.并将自己在实际中用到的经验分享出来.\n\n##闭包:\n　有权访问另一个函数作用域中的变量的函数.创建闭包的常见方式就是在一个函数内部创建另一个函数\n<pre>\n\tfunction createComparisonFunction(propertyName){\n\t\treturn function(object1, object2){\n\t\t\tvar value1=object1[propertyName];\n\t\t\tvar value2=object2[propertyName];\n\t\t\tif (value1 < value2){\n\t\t\t\treturn -1;\t\t\n\t\t\t}else if(value1 > value2){\n\t\t\t\treturn 1;\n\t\t\t}else{\n\t\t\t\treutn 0;\t\n\t\t\t}\t\n\t\t};\n\t}\n</pre>\n\n##作用域链：\n　当某个函数第一次被调用时，会创建一个执行环境（ｅｘｅｃｕｔｉｏｎ　ｃｏｎｔｅｘｔ）及相应的作用域链，并把作用域链赋值给一个特殊的内部属性（［［Ｓｃｏｐｅ］］）．然后使用ｔｈｉｓ．ａｒｇｕｍｅｎｔｓ和其他命名参数的值来初始化函数的活动对象（ａｃｔｉｖａｔｉｏｎ　ｏｂｊｅｃｔ）．但在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位．．．．直至作为作用域链终点的全局执行环境\n<pre>\n\tfunction compare(value1,value2){\n\t\tif(value1 < value2){\n\t\t\treturn -1;\n\t\t}else if(value1 > value2){\n\t\t\treturn 1;\n\t\t}else{\n\t\t\treturn 0;\n\t\t}\n\t}\n\t\n\tvar result = compare(5,10);\n</pre>\n\n  当第一次调用compare()时,会创建一个包含this.arguments,value1和value2的活动对象.全局执行环境的变量对象(包含this.result.compare)在compare()执行环境的作用域链处于第二位\n如下图:\n\t![](https://i.imgur.com/jkpmWLK.png)"}]