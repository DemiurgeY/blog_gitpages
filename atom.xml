<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Demiurge</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blingblingbilng.github.io/shadow/"/>
  <updated>2018-03-31T11:44:15.761Z</updated>
  <id>https://blingblingbilng.github.io/shadow/</id>
  
  <author>
    <name>Demiurge</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://blingblingbilng.github.io/shadow/2018/03/31/JavaScript%E9%97%AD%E5%8C%85/"/>
    <id>https://blingblingbilng.github.io/shadow/2018/03/31/JavaScript闭包/</id>
    <published>2018-03-31T04:26:07.256Z</published>
    <updated>2018-03-31T11:44:15.761Z</updated>
    
    <content type="html"><![CDATA[<p>#JavaScript的闭包(Closure)</p><hr><blockquote><p>本文权当是笔记,后期飞升之后,再回来补自己的理解与体会.并将自己在实际中用到的经验分享出来.</p></blockquote><p>##闭包:<br>　有权访问另一个函数作用域中的变量的函数.创建闭包的常见方式就是在一个函数内部创建另一个函数</p><pre>    function createComparisonFunction(propertyName){        return function(object1, object2){            var value1=object1[propertyName];            var value2=object2[propertyName];            if (value1 < value2){                return -1;                    }else if(value1 > value2){                return 1;            }else{                reutn 0;                }            };    }</pre><p>##作用域链：<br>　当某个函数第一次被调用时，会创建一个执行环境（ｅｘｅｃｕｔｉｏｎ　ｃｏｎｔｅｘｔ）及相应的作用域链，并把作用域链赋值给一个特殊的内部属性（［［Ｓｃｏｐｅ］］）．然后使用ｔｈｉｓ．ａｒｇｕｍｅｎｔｓ和其他命名参数的值来初始化函数的活动对象（ａｃｔｉｖａｔｉｏｎ　ｏｂｊｅｃｔ）．但在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位．．．．直至作为作用域链终点的全局执行环境</p><pre>    function compare(value1,value2){        if(value1 < value2){            return -1;        }else if(value1 > value2){            return 1;        }else{            return 0;        }    }    var result = compare(5,10);</pre><p>  当第一次调用compare()时,会创建一个包含this.arguments,value1和value2的活动对象.全局执行环境的变量对象(包含this.result.compare)在compare()执行环境的作用域链处于第二位<br>如下图:<br>    <img src="https://i.imgur.com/jkpmWLK.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#JavaScript的闭包(Closure)&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;本文权当是笔记,后期飞升之后,再回来补自己的理解与体会.并将自己在实际中用到的经验分享出来.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;##闭包:&lt;br&gt;　有权访问另一个函数作
      
    
    </summary>
    
    
  </entry>
  
</feed>
